package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.26

import (
	"context"
	"fmt"
	"server/graph/model"
)

// Games is the resolver for the games field.
func (r *queryResolver) Games(ctx context.Context) ([]*model.Game, error) {
	// games, err := session.Run(ctx, "Match (a:Game) RETURN a", nil)
	// print("Games: ", games)

	// if err != nil {
	// 	return nil, err
	// }
	var returnGames []*model.Game = make([]*model.Game, 0)
	// for games.Next(ctx) {
	// 	print("In for loop")
	// 	game := games.Record()
	// 	print("Game: ", game)
	// 	// game = game.Values[0].(neo4j.Node).GetProperties()
	// 	// returnGames = append(returnGames, &model.Game{ID: game["id"].(string), Name: game["name"].(string)})
	// 	print("ReturnGames: ", returnGames)
	// }
	returnGames = append(returnGames, &model.Game{ID: "1", Name: "Blah"})

	return returnGames, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
